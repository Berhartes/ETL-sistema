/**
 * Sistema de Firestore Unificado
 *
 * Este m√≥dulo oferece uma interface unificada para o Firestore,
 * determinando automaticamente se deve usar a implementa√ß√£o real ou mock
 * baseado nas configura√ß√µes de ambiente definidas pelas flags.
 *
 * @example
 * ```typescript
 * import { createBatchManager, saveToFirestore, BatchManager } from '../utils/storage/firestore/index.js';
 *
 * // Usar batch manager
 * const batch = createBatchManager();
 * batch.set('senadores/123', { nome: 'Jo√£o Silva' });
 * await batch.commit();
 *
 * // Salvar documento √∫nico
 * await saveToFirestore('senadores', '123', { nome: 'Jo√£o Silva' });
 * ```
 */
import { logger } from '../../logging/index.js';
import { getDestinoConfig } from '../../../../../../../config/etl.config.js';

// Obter configura√ß√£o de destino
const destinoConfig = getDestinoConfig();

// Log da configura√ß√£o detectada para debug
logger.info('üîß Configura√ß√£o do Sistema de Armazenamento:');
logger.info(`   ‚Ä¢ Firestore Real: ${destinoConfig.useRealFirestore}`);
logger.info(`   ‚Ä¢ Emulador: ${destinoConfig.useEmulator}`);
logger.info(`   ‚Ä¢ Salvar no PC: ${destinoConfig.saveToPC}`);
if (destinoConfig.pcSaveDir) {
  logger.info(`   ‚Ä¢ Diret√≥rio PC: ${destinoConfig.pcSaveDir}`);
}
if (destinoConfig.useEmulator && process.env.FIRESTORE_EMULATOR_HOST) {
  logger.info(`   ‚Ä¢ Host Emulador: ${process.env.FIRESTORE_EMULATOR_HOST}`);
}

// Log de confirma√ß√£o da conex√£o ativa
if (destinoConfig.useRealFirestore && !destinoConfig.useEmulator) {
  logger.info('‚òÅÔ∏è  CONEX√ÉO ATIVA: Firestore Real (Produ√ß√£o)');
} else if (destinoConfig.useEmulator) {
  logger.info(`üîå CONEX√ÉO ATIVA: Emulador Firestore (${process.env.FIRESTORE_EMULATOR_HOST || '127.0.0.1:8080'})`);
} else if (destinoConfig.saveToPC && !destinoConfig.useRealFirestore && !destinoConfig.useEmulator) {
  logger.info(`üíæ CONEX√ÉO ATIVA: Salvamento Local (${destinoConfig.pcSaveDir})`);
} else {
  logger.warn('‚ö†Ô∏è  ATEN√á√ÉO: Nenhuma conex√£o de armazenamento claramente definida');
}

// Exportar interfaces compartilhadas
export type { BatchManager } from './batch.js';

/**
 * Cria um novo gerenciador de lote para opera√ß√µes no Firestore
 * Determina automaticamente qual implementa√ß√£o usar baseado nas flags
 */
export async function createBatchManager() {
  const currentDestinoConfig = getDestinoConfig(); // Usar a fun√ß√£o para obter a config atual

  if (currentDestinoConfig.useEmulator) {
    logger.info(`üîå Usando Firestore EMULADOR em ${process.env.FIRESTORE_EMULATOR_HOST || 'localhost:8080'}`);
    const { createBatchManager: createRealBatchManager } = await import('./real.js');
    return createRealBatchManager(); // Real mas conectado ao emulador
  }

  if (currentDestinoConfig.useRealFirestore) {
    logger.info('‚òÅÔ∏è Usando Firestore REAL (Produ√ß√£o)');
    const { createBatchManager: createRealBatchManager } = await import('./real.js');
    return createRealBatchManager();
  }

  // Se saveToPC for true, e NENHUMA outra op√ß√£o de Firestore (Real/Emulador) estiver ativa
  if (currentDestinoConfig.saveToPC && !currentDestinoConfig.useRealFirestore && !currentDestinoConfig.useEmulator) {
    logger.info('üíæ Modo PC ativo (exclusivo): Retornando um BatchManager no-op.');
    // Retornar um BatchManager "no-op" que n√£o faz nada e n√£o valida contra o Firestore.
    // Isso evita erros quando o processador chama createBatchManager() incondicionalmente.
    // A l√≥gica de salvamento real para PC ser√° tratada no processador.
    return {
      set: async (path: string, data: any) => { logger.debug(`[NoOpBatchManager] SET (ignorado para PC): ${path}`, data); },
      update: async (path: string, data: any) => { logger.debug(`[NoOpBatchManager] UPDATE (ignorado para PC): ${path}`, data); },
      delete: async (path: string) => { logger.debug(`[NoOpBatchManager] DELETE (ignorado para PC): ${path}`); },
      commit: async () => {
        logger.debug('[NoOpBatchManager] COMMIT (ignorado para PC)');
        return { total: 0, processados: 0, sucessos: 0, falhas: 0, tempoOperacao: 0, detalhes: null }; // Adicionado detalhes: null
      },
    };
  }
  
  // Se saveToPC √© true, MAS useRealFirestore ou useEmulator tamb√©m √© true.
  // Isso significa que queremos salvar no PC E no Firestore.
  // O createBatchManager retornar√° o RealBatchManager para as opera√ß√µes do Firestore.
  // A l√≥gica de salvamento no PC ser√° tratada separadamente no processador.
  if (currentDestinoConfig.saveToPC && (currentDestinoConfig.useRealFirestore || currentDestinoConfig.useEmulator)) {
     logger.warn('üíæ Modo PC ativo em conjunto com Firestore. createBatchManager retornar√° RealBatchManager para opera√ß√µes Firestore.');
     // A l√≥gica anterior j√° cobre useEmulator e useRealFirestore, ent√£o eles teriam retornado.
     // Este bloco √© mais para clareza ou se a ordem dos if's mudar.
     // Se chegou aqui, significa que useEmulator e useRealFirestore eram falsos, o que contradiz a condi√ß√£o.
     // A l√≥gica correta √© que os ifs de useEmulator e useRealFirestore j√° teriam retornado o RealBatchManager.
     // Portanto, se saveToPC est√° ativo e um dos outros tamb√©m, o RealBatchManager j√° foi devolvido.
     // Este log pode ser redundante ou indicar um estado que n√£o deveria ser alcan√ßado se a l√≥gica acima estiver correta.
     // A inten√ß√£o √©: se h√° um destino Firestore, use o RealBatchManager.
     // Se o √∫nico destino √© PC, use o NoOp.
     // Se chegou aqui, √© porque nem useEmulator nem useRealFirestore s√£o true,
     // ent√£o o if anterior (saveToPC && !useRealFirestore && !useEmulator) j√° deveria ter pego.
     // Este log pode ser removido ou ajustado.
     // Por seguran√ßa, se chegarmos aqui e saveToPC √© true, mas os outros n√£o, algo est√° errado.
     // A l√≥gica j√° est√° coberta.
  }

  // Se n√£o for saveToPC (exclusivo) e nenhuma configura√ß√£o de Firestore estiver ativa
  logger.error('‚ùå Nenhuma configura√ß√£o de destino v√°lida (Firestore Real/Emulador ou PC exclusivo) ativa. N√£o √© poss√≠vel criar BatchManager.');
  throw new Error('Configura√ß√£o de destino inv√°lida ou ausente para BatchManager.');
}

/**
 * Fun√ß√£o helper para salvar dados no Firestore de forma organizada
 * Determina automaticamente qual implementa√ß√£o usar baseado nas flags
 */
export async function saveToFirestore(
  collectionPath: string,
  documentId: string | null,
  data: any,
  options: { merge?: boolean } = {}
): Promise<void> {
  // Se estiver no modo PC, n√£o salvar no Firestore
  if (destinoConfig.saveToPC) {
    logger.debug(`Modo PC ativo - ignorando salvamento no Firestore de ${collectionPath}/${documentId || 'auto'}`);
    return;
  }

  // Usar implementa√ß√£o real para emulador e produ√ß√£o
  if (destinoConfig.useEmulator || destinoConfig.useRealFirestore) {
    const firestoreReal = await import('./real.js');
    await firestoreReal.saveToFirestore(collectionPath, documentId, data, options);
  } else {
    // Se n√£o for PC, nem Emulador, nem Real, √© uma configura√ß√£o inesperada.
    logger.warn(`   Opera√ß√£o saveToFirestore para ${collectionPath}/${documentId || 'auto'} n√£o ser√° executada devido √† aus√™ncia de configura√ß√£o de Firestore (Real/Emulador).`);
  }
}

/**
 * Obt√©m a configura√ß√£o atual do Firestore
 */
export function getFirestoreConfig() {
  const config = {
    ...destinoConfig,
    environment: process.env.NODE_ENV || 'development',
    emulatorHost: process.env.FIRESTORE_EMULATOR_HOST,
    description: getConfigDescription()
  };

  return config;
}

/**
 * Retorna uma descri√ß√£o leg√≠vel da configura√ß√£o atual
 */
function getConfigDescription(): string {
  if (destinoConfig.saveToPC) {
    return `Salvando no PC em: ${destinoConfig.pcSaveDir}`;
  }
  if (destinoConfig.useEmulator) {
    return `Firestore Emulador (${process.env.FIRESTORE_EMULATOR_HOST || '127.0.0.1:8000'})`;
  }
  if (destinoConfig.useRealFirestore) {
    return 'Firestore Real (Produ√ß√£o)';
  }
  // Mock foi removido, ent√£o este estado n√£o deveria ocorrer se saveToPC, useEmulator ou useRealFirestore for true.
  // Se todos forem falsos, √© uma configura√ß√£o n√£o especificada.
  return 'Configura√ß√£o de destino n√£o especificada ou inv√°lida';
}

// Reexportar utilit√°rios espec√≠ficos se necess√°rio
export { DocumentRefHelper, AbstractBatchManager } from './batch.js';

// Reexportar funcionalidades da implementa√ß√£o real (para uso direto quando necess√°rio)
export { getFirestoreDb as firestoreDb } from './config.js';

export { getFirebaseAdmin as firebaseAdmin } from './config.js';

/**
 * Verifica se o sistema est√° configurado para salvar no PC
 */
export function isSavingToPC(): boolean {
  return destinoConfig.saveToPC;
}

/**
 * Obt√©m o diret√≥rio configurado para salvar no PC
 */
export function getPCSaveDirectory(): string | undefined {
  return destinoConfig.pcSaveDir;
}
