/**
 * Script para buscar transa√ß√µes do fornecedor espec√≠fico
 */

const admin = require('firebase-admin');
const serviceAccount = require('./config/serviceAccountKey.json');

if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
    projectId: serviceAccount.project_id
  });
}

const db = admin.firestore();

async function buscarTransacoesFornecedor() {
  const cnpj = '00082535000159'; // HOTEL GIRASSOL PLAZA
  console.log(`üîç Buscando transa√ß√µes para fornecedor ${cnpj}...\n`);
  
  // Poss√≠veis cole√ß√µes de despesas
  const possiveisColecoes = [
    'monitorgastos/despesas-consolidadas/consolidado',
    'despesas',
    'monitorgastos/despesas',
    'despesas-deputados',
    'monitorgastos/despesas-deputados'
  ];
  
  let totalTransacoesEncontradas = 0;
  const tiposDespesaEncontrados = [];
  
  for (const colecao of possiveisColecoes) {
    console.log(`üìÇ Verificando: ${colecao}`);
    
    try {
      // Tentar diferentes campos de CNPJ
      const camposCnpj = ['cpfCnpj', 'cnpjCpf', 'cnpj', 'fornecedorCnpj'];
      
      for (const campo of camposCnpj) {
        try {
          console.log(`   üîé Buscando por campo: ${campo}`);
          const query = db.collection(colecao).where(campo, '==', cnpj).limit(10);
          const snapshot = await query.get();
          
          if (!snapshot.empty) {
            console.log(`   ‚úÖ Encontradas ${snapshot.docs.length} transa√ß√µes por ${campo}`);
            
            snapshot.docs.forEach((doc, index) => {
              const data = doc.data();
              console.log(`   [${index + 1}] ${doc.id}:`);
              console.log(`       Nome fornecedor: ${data.nomeFornecedor || data.nomeDoFornecedor || data.nome || 'N/A'}`);
              console.log(`       Tipo Despesa: ${data.tipoDespesa || 'N/A'}`);
              console.log(`       Valor: ${data.valorLiquido || data.valor || 'N/A'}`);
              console.log(`       Ano: ${data.ano || 'N/A'}, M√™s: ${data.mes || 'N/A'}`);
              
              if (data.tipoDespesa) {
                tiposDespesaEncontrados.push(data.tipoDespesa);
              }
              
              totalTransacoesEncontradas++;
            });
          } else {
            console.log(`   ‚ùå Nenhuma transa√ß√£o encontrada por ${campo}`);
          }
        } catch (error) {
          console.log(`   ‚ö†Ô∏è Erro ao buscar por ${campo}: ${error.message}`);
        }
      }
      
    } catch (error) {
      console.log(`   ‚ùå Erro geral na cole√ß√£o: ${error.message}`);
    }
    
    console.log();
  }
  
  console.log(`üìä Resumo:`);
  console.log(`   Total transa√ß√µes: ${totalTransacoesEncontradas}`);
  console.log(`   Tipos de despesa encontrados:`, [...new Set(tiposDespesaEncontrados)]);
  
  if (tiposDespesaEncontrados.length > 0) {
    // Mapear para categorias
    const categorias = tiposDespesaEncontrados.map(tipo => mapTipoDespesaToCategoria(tipo));
    const contadorCategorias = {};
    
    categorias.forEach(categoria => {
      contadorCategorias[categoria] = (contadorCategorias[categoria] || 0) + 1;
    });
    
    console.log(`   Categorias calculadas:`, contadorCategorias);
    
    // Categoria mais frequente
    let categoriaMaisFrequente = 'OUTROS';
    let maiorFrequencia = 0;
    
    Object.entries(contadorCategorias).forEach(([categoria, freq]) => {
      if (freq > maiorFrequencia) {
        maiorFrequencia = freq;
        categoriaMaisFrequente = categoria;
      }
    });
    
    console.log(`   üéØ Categoria principal: ${categoriaMaisFrequente} (${maiorFrequencia} ocorr√™ncias)`);
  }
}

// Fun√ß√£o para mapear tipo de despesa para categoria (copiada do script principal)
function mapTipoDespesaToCategoria(tipoDespesa) {
  if (!tipoDespesa) return 'OUTROS';
  
  const tipo = tipoDespesa.toLowerCase();
  
  if (tipo.includes('passagem') || tipo.includes('transporte') || tipo.includes('combust√≠') || tipo.includes('loca√ß√£o ve√≠c')) {
    return 'TRANSPORTE';
  } else if (tipo.includes('hotel') || tipo.includes('hospedage') || tipo.includes('pousada')) {
    return 'HOSPEDAGEM';
  } else if (tipo.includes('aliment') || tipo.includes('refei√ß√£o') || tipo.includes('restaurante')) {
    return 'ALIMENTA√á√ÉO';
  } else if (tipo.includes('consult') || tipo.includes('assessor') || tipo.includes('servi√ßos')) {
    return 'CONSULTORIA';
  } else if (tipo.includes('material') || tipo.includes('equipamento') || tipo.includes('suprimento')) {
    return 'MATERIAL';
  } else if (tipo.includes('divulga√ß√£o') || tipo.includes('publicidad') || tipo.includes('propaganda')) {
    return 'DIVULGA√á√ÉO';
  } else if (tipo.includes('telefon') || tipo.includes('comunica√ß√£o') || tipo.includes('internet')) {
    return 'COMUNICA√á√ÉO';
  } else if (tipo.includes('postal') || tipo.includes('correio')) {
    return 'POSTAL';
  } else if (tipo.includes('combust√≠vel') || tipo.includes('gasolina') || tipo.includes('etanol')) {
    return 'COMBUST√çVEL';
  } else if (tipo.includes('seguran√ßa') || tipo.includes('vigil√¢ncia')) {
    return 'SEGURAN√áA';
  }
  
  return 'OUTROS';
}

// Executar busca
buscarTransacoesFornecedor().catch(console.error);