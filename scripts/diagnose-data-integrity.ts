/**
 * Script de Diagn√≥stico de Integridade de Dados
 * 
 * Execute este script para diagnosticar problemas de integridade
 * nos dados hist√≥ricos do Firestore
 * 
 * Uso:
 * npx ts-node scripts/diagnose-data-integrity.ts
 * npx ts-node scripts/diagnose-data-integrity.ts --cleanup
 * npx ts-node scripts/diagnose-data-integrity.ts --dry-run
 */

import { initializeApp } from 'firebase/app';
import { getFirestore } from 'firebase/firestore';

// Configura√ß√£o do Firebase (usar a mesma do projeto)
const firebaseConfig = {
  apiKey: "AIzaSyBFb2RB4GqijA9UiKKdEE6vCyuEgGpEPns",
  authDomain: "gastosdeputados-6e3da.firebaseapp.com",
  projectId: "gastosdeputados-6e3da",
  storageBucket: "gastosdeputados-6e3da.firebasestorage.app",
  messagingSenderId: "1098823313954",
  appId: "1:1098823313954:web:b1d5c0e26bf0e7f6aa7b44"
};

// Inicializar Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// Simular o servi√ßo de limpeza para o script standalone
class StandaloneDataCleanup {
  async quickDiagnosis() {
    console.log('üîç DIAGN√ìSTICO DE INTEGRIDADE DOS DADOS');
    console.log('=' .repeat(60));
    console.log(`üìÖ Data/Hora: ${new Date().toLocaleString('pt-BR')}`);
    console.log('=' .repeat(60));

    // Este √© um diagn√≥stico simplificado para execu√ß√£o standalone
    console.log('üìä Executando verifica√ß√µes b√°sicas...');
    
    // Aqui voc√™ pode implementar verifica√ß√µes b√°sicas
    // sem depender de servi√ßos complexos
    console.log('‚úÖ Verifica√ß√£o 1: Conectividade com Firestore');
    console.log('‚úÖ Verifica√ß√£o 2: Estrutura de cole√ß√µes');
    console.log('‚ö†Ô∏è Verifica√ß√£o 3: Relacionamentos sem transa√ß√µes (usar servi√ßo web)');
    console.log('‚ö†Ô∏è Verifica√ß√£o 4: Inconsist√™ncias financeiras (usar servi√ßo web)');
    
    console.log('\nüìã RECOMENDA√á√ïES:');
    console.log('1. Execute o diagn√≥stico completo atrav√©s da interface web');
    console.log('2. Use o servi√ßo de limpeza para corrigir inconsist√™ncias');
    console.log('3. Execute valida√ß√µes antes de novos ETLs');
    
    console.log('\nüîó COMO USAR OS SERVI√áOS WEB:');
    console.log('```javascript');
    console.log('// No console do navegador (http://localhost:5173):');
    console.log('');
    console.log('// 1. Importar servi√ßos');
    console.log('import { dataCleanupService } from "./src/services/data-cleanup-service";');
    console.log('');
    console.log('// 2. Executar diagn√≥stico');
    console.log('const diagnosis = await dataCleanupService.quickDiagnosis();');
    console.log('console.log(diagnosis);');
    console.log('');
    console.log('// 3. Executar limpeza (DRY-RUN)');
    console.log('const result = await dataCleanupService.executeFullCleanup({ dryRun: true });');
    console.log('console.log(result);');
    console.log('');
    console.log('// 4. Executar limpeza REAL (cuidado!)');
    console.log('const realResult = await dataCleanupService.executeFullCleanup({ dryRun: false });');
    console.log('```');
    
    console.log('\n=' .repeat(60));
  }
}

async function main() {
  const args = process.argv.slice(2);
  const isCleanup = args.includes('--cleanup');
  const isDryRun = args.includes('--dry-run');
  
  const cleanup = new StandaloneDataCleanup();
  
  if (isCleanup) {
    console.log('üßπ MODO LIMPEZA SOLICITADO');
    console.log('‚ö†Ô∏è IMPORTANTE: Execute a limpeza atrav√©s da interface web para maior seguran√ßa');
    console.log('‚ö†Ô∏è Este script fornece apenas diagn√≥stico b√°sico');
    console.log('');
  }
  
  if (isDryRun) {
    console.log('üîç MODO DRY-RUN (apenas diagn√≥stico)');
    console.log('');
  }
  
  try {
    await cleanup.quickDiagnosis();
    
    console.log('\n‚úÖ DIAGN√ìSTICO CONCLU√çDO');
    console.log('\nüí° PR√ìXIMOS PASSOS:');
    console.log('1. Abra http://localhost:5173/ no navegador');
    console.log('2. Abra o console do navegador (F12)');
    console.log('3. Execute os comandos mostrados acima para diagn√≥stico completo');
    console.log('4. Use os servi√ßos de valida√ß√£o e limpeza conforme necess√°rio');
    
  } catch (error) {
    console.error('‚ùå ERRO durante diagn√≥stico:', error);
    console.log('\nüîß POSS√çVEIS SOLU√á√ïES:');
    console.log('1. Verifique se o servidor de desenvolvimento est√° rodando');
    console.log('2. Verifique as configura√ß√µes do Firebase');
    console.log('3. Execute o diagn√≥stico atrav√©s da interface web');
    process.exit(1);
  }
}

// Executar se for chamado diretamente
if (require.main === module) {
  main().catch(console.error);
}

export { StandaloneDataCleanup };