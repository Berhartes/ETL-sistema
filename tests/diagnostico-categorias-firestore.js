/**
 * Diagn√≥stico detalhado das categorias no Firestore
 * 
 * Este script vai investigar:
 * 1. Quais documentos de ranking realmente existem
 * 2. Quais categorias existem nas transa√ß√µes
 * 3. Por que algumas categorias est√£o "perdidas"
 */

// Simular uma busca no console do Firestore
console.log('üîç DIAGN√ìSTICO DETALHADO DAS CATEGORIAS NO FIRESTORE\n');

// Lista de categorias que aparecem na interface
const categoriasInterface = [
  'Aquisi√ß√£o de Tokens e Certificados Digitais',
  'Assinatura de Publica√ß√µes',
  'Combust√≠veis e Lubrificantes',
  'Consultorias, Pesquisas e Trabalhos T√©cnicos',
  'Divulga√ß√£o da Atividade Parlamentar',
  'Fornecimento de Alimenta√ß√£o do Parlamentar',
  'Hospedagem (Exceto do Parlamentar no Distrito Federal)',
  'Loca√ß√£o ou Fretamento de Aeronaves',
  'Loca√ß√£o ou Fretamento de Embarca√ß√µes',
  'Loca√ß√£o ou Fretamento de Ve√≠culos Automotores',
  'Manuten√ß√£o de Escrit√≥rio de Apoio √† Atividade Parlamentar',
  'Participa√ß√£o em Curso, Palestra ou Evento Similar',
  'Passagem A√©rea - RPA',
  'Passagem A√©rea - Reembolso',
  'Passagem A√©rea - SIGEPA',
  'Passagens Terrestres, Mar√≠timas ou Fluviais',
  'Servi√ßo de Seguran√ßa Prestado por Empresa Especializada',
  'Servi√ßo de T√°xi, Ped√°gio e Estacionamento',
  'Servi√ßos Postais',
  'Telefonia'
];

// Fun√ß√£o para normalizar (mesma do sistema)
function normalizar(categoria) {
  return categoria
    .toLowerCase()
    .replace(/[√†√°√¢√£√§√•]/g, 'a')
    .replace(/[√®√©√™√´]/g, 'e')
    .replace(/[√¨√≠√Æ√Ø]/g, 'i')
    .replace(/[√≤√≥√¥√µ√∂]/g, 'o')
    .replace(/[√π√∫√ª√º]/g, 'u')
    .replace(/[√ß]/g, 'c')
    .replace(/[^a-z0-9]/g, '_')
    .replace(/_+/g, '_')
    .replace(/^_|_$/g, '');
}

// Documentos que sabemos que existem (verificados anteriormente)
const documentosExistentes = [
  'deputados_combustiveis_e_lubrificantes_historico',
  'deputados_divulgacao_da_atividade_parlamentar_historico',
  'deputados_manutencao_de_escritorio_de_apoio_a_atividade_parlamentar_historico',
  'deputados_fornecimento_de_alimentacao_do_parlamentar_historico',
  'deputados_servicos_postais_historico',
  'deputados_telefonia_historico',
  'deputados_locacao_ou_fretamento_de_veiculos_historico',
  'deputados_passagens_aereas_historico',
  'deputados_hospedagem_historico',
  'deputados_consultorias_assessorias_pesquisas_e_trabalhos_tecnicos_historico'
];

console.log('üìä PARTE 1: An√°lise das categorias da interface\n');

const resultadosAnalise = [];

categoriasInterface.forEach((categoria, index) => {
  const normalizada = normalizar(categoria);
  const docIdHistorico = `deputados_${normalizada}_historico`;
  const docId2025 = `deputados_${normalizada}_2025`;
  
  const existeHistorico = documentosExistentes.includes(docIdHistorico);
  
  const resultado = {
    categoria,
    normalizada,
    docIdHistorico,
    docId2025,
    existeHistorico,
    status: existeHistorico ? '‚úÖ EXISTE' : '‚ùå N√ÉO EXISTE'
  };
  
  resultadosAnalise.push(resultado);
  
  console.log(`${index + 1}. "${categoria}"`);
  console.log(`   Normalizada: "${normalizada}"`);
  console.log(`   Doc hist√≥rico: "${docIdHistorico}"`);
  console.log(`   Status: ${resultado.status}`);
  
  if (!existeHistorico) {
    // Tentar encontrar similaridades
    const similares = documentosExistentes.filter(doc => {
      const docSemPrefixo = doc.replace('deputados_', '').replace('_historico', '');
      const palavrasCategoria = normalizada.split('_');
      const palavrasDoc = docSemPrefixo.split('_');
      
      return palavrasCategoria.some(palavra => 
        palavrasDoc.some(docPalavra => 
          docPalavra.includes(palavra) || palavra.includes(docPalavra)
        )
      );
    });
    
    if (similares.length > 0) {
      console.log(`   Poss√≠vel correspond√™ncia: ${similares[0]}`);
    }
  }
  
  console.log('');
});

console.log('\nüìä PARTE 2: Resumo da an√°lise\n');

const existentes = resultadosAnalise.filter(r => r.existeHistorico);
const naoExistentes = resultadosAnalise.filter(r => !r.existeHistorico);

console.log(`‚úÖ Categorias com documentos (${existentes.length}/${categoriasInterface.length}):`);
existentes.forEach(cat => {
  console.log(`   - ${cat.categoria}`);
});

console.log(`\n‚ùå Categorias sem documentos (${naoExistentes.length}/${categoriasInterface.length}):`);
naoExistentes.forEach(cat => {
  console.log(`   - ${cat.categoria}`);
});

console.log('\nüìä PARTE 3: An√°lise dos padr√µes\n');

// Verificar padr√µes nas categorias inexistentes
console.log('üîç Padr√µes identificados nas categorias inexistentes:');

const comHifen = naoExistentes.filter(cat => cat.categoria.includes(' - '));
if (comHifen.length > 0) {
  console.log(`\n1. Categorias com h√≠fen (${comHifen.length}):`);
  comHifen.forEach(cat => {
    console.log(`   - ${cat.categoria}`);
  });
  console.log('   üí° Suspeita: Podem ser subcategorias que deveriam ser agrupadas');
}

const comParenteses = naoExistentes.filter(cat => cat.categoria.includes('('));
if (comParenteses.length > 0) {
  console.log(`\n2. Categorias com par√™nteses (${comParenteses.length}):`);
  comParenteses.forEach(cat => {
    console.log(`   - ${cat.categoria}`);
  });
  console.log('   üí° Suspeita: Podem ser especifica√ß√µes que deveriam usar categoria base');
}

const locacao = naoExistentes.filter(cat => cat.categoria.includes('Loca√ß√£o ou Fretamento'));
if (locacao.length > 0) {
  console.log(`\n3. Varia√ß√µes de Loca√ß√£o/Fretamento (${locacao.length}):`);
  locacao.forEach(cat => {
    console.log(`   - ${cat.categoria}`);
  });
  console.log('   üí° Suspeita: Deveriam usar "deputados_locacao_ou_fretamento_de_veiculos_historico"');
}

console.log('\nüìä PARTE 4: Investiga√ß√£o das poss√≠veis causas\n');

console.log('üîç Poss√≠veis raz√µes para categorias n√£o encontradas:');
console.log('');
console.log('1. üìã PROCESSO ETL INCOMPLETO:');
console.log('   - Algumas categorias podem n√£o ter sido processadas');
console.log('   - Rankings podem n√£o ter sido gerados para todas as categorias');
console.log('   - Verificar logs do processo de gera√ß√£o de rankings');
console.log('');
console.log('2. üè∑Ô∏è INCONSIST√äNCIA DE NOMES:');
console.log('   - Nomes na interface vs nomes nos dados originais');
console.log('   - Mudan√ßas nos nomes das categorias ao longo do tempo');
console.log('   - Normaliza√ß√£o diferente entre sistemas');
console.log('');
console.log('3. üìä VOLUME DE DADOS INSUFICIENTE:');
console.log('   - Categorias com poucas transa√ß√µes podem n√£o gerar rankings');
console.log('   - Filtros de volume m√≠nimo no processo ETL');
console.log('   - Verificar se existem transa√ß√µes para essas categorias');
console.log('');
console.log('4. üóÇÔ∏è AGRUPAMENTO DE SUBCATEGORIAS:');
console.log('   - Subcategorias podem estar sendo agrupadas');
console.log('   - "Passagem A√©rea - RPA" pode estar em "Passagens A√©reas"');
console.log('   - "Hospedagem (Exceto...)" pode estar em "Hospedagem"');

console.log('\nüìä PARTE 5: Pr√≥ximos passos para investiga√ß√£o\n');

console.log('üîç Para resolver o mist√©rio das categorias perdidas:');
console.log('');
console.log('1. üóÉÔ∏è VERIFICAR COLE√á√ÉO DE TRANSA√á√ïES:');
console.log('   - Listar todas as categorias √∫nicas nas transa√ß√µes');
console.log('   - Verificar se as categorias "perdidas" existem nos dados brutos');
console.log('   - Comando: db.transacoes.distinct("categoria")');
console.log('');
console.log('2. üìã VERIFICAR COLE√á√ÉO DE RANKINGS:');
console.log('   - Listar todos os documentos na cole√ß√£o rankings');
console.log('   - Verificar padr√µes de nomenclatura');
console.log('   - Comando: db.rankings.find().map(doc => doc._id)');
console.log('');
console.log('3. üîÑ VERIFICAR PROCESSO ETL:');
console.log('   - Logs de gera√ß√£o de rankings');
console.log('   - Verificar se todas as categorias s√£o processadas');
console.log('   - Verificar crit√©rios de filtro (volume m√≠nimo, etc.)');
console.log('');
console.log('4. üß™ TESTE ESPEC√çFICO:');
console.log('   - Buscar transa√ß√µes para uma categoria "perdida"');
console.log('   - Verificar se consegue gerar ranking manualmente');
console.log('   - Exemplo: "Aquisi√ß√£o de Tokens e Certificados Digitais"');

console.log('\n‚úÖ Diagn√≥stico conclu√≠do!');
console.log('\nPr√≥ximo passo: Investigar no console do Firestore ou via script conectado ao banco.');